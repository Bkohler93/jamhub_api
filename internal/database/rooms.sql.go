// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: rooms.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms(id, name, created_at, updated_at)
VALUES ($1,$2,$3,$4)
RETURNING id, name, created_at, updated_at
`

type CreateRoomParams struct {
	ID        uuid.UUID
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRowContext(ctx, createRoom,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM rooms WHERE id=$1
`

func (q *Queries) DeleteRoom(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRoom, id)
	return err
}

const getRoomByID = `-- name: GetRoomByID :one
SELECT id, name, created_at, updated_at FROM rooms WHERE id=$1
`

func (q *Queries) GetRoomByID(ctx context.Context, id uuid.UUID) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoomByID, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRooms = `-- name: GetRooms :many
SELECT id, name, created_at, updated_at FROM rooms
ORDER BY (
	SELECT COUNT(*) FROM room_subscriptions WHERE id=room_id
) 
LIMIT $1
`

func (q *Queries) GetRooms(ctx context.Context, limit int32) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, getRooms, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomsOrderedBySubs = `-- name: GetRoomsOrderedBySubs :many
SELECT
	rooms.id AS room_id,
	rooms.name AS room_name,
	rooms.created_at,
	rooms.updated_at,
	COUNT(room_subscriptions.room_id) AS subscription_count
FROM	
	rooms
LEFT JOIN
	room_subscriptions on rooms.id = room_subscriptions.room_id
GROUP BY
	rooms.id, rooms.name, rooms.created_at, rooms.updated_at
ORDER BY	subscription_count DESC
LIMIT $1 OFFSET $2
`

type GetRoomsOrderedBySubsParams struct {
	Limit  int32
	Offset int32
}

type GetRoomsOrderedBySubsRow struct {
	RoomID            uuid.UUID
	RoomName          string
	CreatedAt         time.Time
	UpdatedAt         time.Time
	SubscriptionCount int64
}

// use this to retrieve "Top" rooms ordered by number of subs a room has, seen in Home Page of app underneath "TOP" heading
func (q *Queries) GetRoomsOrderedBySubs(ctx context.Context, arg GetRoomsOrderedBySubsParams) ([]GetRoomsOrderedBySubsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRoomsOrderedBySubs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRoomsOrderedBySubsRow
	for rows.Next() {
		var i GetRoomsOrderedBySubsRow
		if err := rows.Scan(
			&i.RoomID,
			&i.RoomName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SubscriptionCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRoomsOrderedBySubs = `-- name: GetUserRoomsOrderedBySubs :many
SELECT
	rooms.id AS room_id,
	rooms.name AS room_name,
	rooms.created_at,
	rooms.updated_at,
	COUNT(room_subscriptions.room_id) AS subscription_count
FROM	
	rooms
LEFT JOIN
	room_subscriptions on rooms.id = room_subscriptions.room_id
WHERE
	room_subscriptions.user_id = $1
GROUP BY
	rooms.id, rooms.name, rooms.created_at, rooms.updated_at, room_subscriptions.created_at
ORDER BY	room_subscriptions.created_at DESC
LIMIT $2 OFFSET $3
`

type GetUserRoomsOrderedBySubsParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

type GetUserRoomsOrderedBySubsRow struct {
	RoomID            uuid.UUID
	RoomName          string
	CreatedAt         time.Time
	UpdatedAt         time.Time
	SubscriptionCount int64
}

// use this to retrieve a user's subbed rooms ordered by date subbed, seen in Home Page of app underneath "Your subscriptions" heading
func (q *Queries) GetUserRoomsOrderedBySubs(ctx context.Context, arg GetUserRoomsOrderedBySubsParams) ([]GetUserRoomsOrderedBySubsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserRoomsOrderedBySubs, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserRoomsOrderedBySubsRow
	for rows.Next() {
		var i GetUserRoomsOrderedBySubsRow
		if err := rows.Scan(
			&i.RoomID,
			&i.RoomName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SubscriptionCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
