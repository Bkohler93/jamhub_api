// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(id, email, phone, password_hash, display_name, created_at, updated_at)
VALUES ($1,$2,$3,$4,$5,$6,$7)
RETURNING id, email, phone, password_hash, display_name, created_at, updated_at
`

type CreateUserParams struct {
	ID           uuid.UUID
	Email        sql.NullString
	Phone        sql.NullString
	PasswordHash string
	DisplayName  string
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Phone,
		arg.PasswordHash,
		arg.DisplayName,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByDisplayName = `-- name: GetUserByDisplayName :one
SELECT id, email, phone, password_hash, display_name, created_at, updated_at FROM users WHERE display_name = $1
`

func (q *Queries) GetUserByDisplayName(ctx context.Context, displayName string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByDisplayName, displayName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, phone, password_hash, display_name, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, phone, password_hash, display_name, created_at, updated_at FROM users WHERE id=$1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, email, phone, password_hash, display_name, created_at, updated_at FROM users WHERE phone=$1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phone sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
	email=COALESCE($1::VARCHAR(64),email),
	phone=COALESCE($2::VARCHAR(64),phone),
	updated_at=$3::TIMESTAMP,
	password_hash = CASE WHEN $4::VARCHAR(100) IS NULL THEN password_hash ELSE $4::VARCHAR(100) END,
	display_name = CASE WHEN $5::VARCHAR(64) IS NULL THEN display_name ELSE $5::VARCHAR(64) END
WHERE id=$6::UUID
RETURNING id, email, phone, password_hash, display_name, created_at, updated_at
`

type UpdateUserParams struct {
	Email        sql.NullString
	Phone        sql.NullString
	UpdatedAt    time.Time
	PasswordHash sql.NullString
	DisplayName  sql.NullString
	ID           uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Email,
		arg.Phone,
		arg.UpdatedAt,
		arg.PasswordHash,
		arg.DisplayName,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
