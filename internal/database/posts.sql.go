// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: posts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts(id, user_id, room_id, link, updated_at, created_at)
VALUES ($1,$2,$3,$4,$5,$6)
RETURNING id, user_id, room_id, link, created_at, updated_at
`

type CreatePostParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	RoomID    uuid.UUID
	Link      string
	UpdatedAt time.Time
	CreatedAt time.Time
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.UserID,
		arg.RoomID,
		arg.Link,
		arg.UpdatedAt,
		arg.CreatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoomID,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts WHERE id=$1
`

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getNewRoomPosts = `-- name: GetNewRoomPosts :many
SELECT 
	posts.id,
	posts.user_id,
	posts.room_id,
	posts.link,
	posts.created_at,
	posts.updated_at
FROM
	posts
INNER JOIN
	rooms
ON
	posts.room_id=rooms.id
WHERE posts.room_id = $1
ORDER BY
	posts.created_at DESC
`

// use to retrieve the "New" posts in a given room
func (q *Queries) GetNewRoomPosts(ctx context.Context, roomID uuid.UUID) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getNewRoomPosts, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoomID,
			&i.Link,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPost = `-- name: GetPost :one
SELECT id, user_id, room_id, link, created_at, updated_at FROM posts WHERE id=$1
`

func (q *Queries) GetPost(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoomID,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoomPosts = `-- name: GetRoomPosts :many
SELECT id, user_id, room_id, link, created_at, updated_at FROM posts WHERE room_id=$1
`

func (q *Queries) GetRoomPosts(ctx context.Context, roomID uuid.UUID) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getRoomPosts, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoomID,
			&i.Link,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopRoomPosts = `-- name: GetTopRoomPosts :many
SELECT
	posts.id as post_id,
	posts.room_id,
	posts.link,
	posts.created_at,
	posts.updated_at,
	SUM(CASE WHEN post_votes.is_up=TRUE THEN 1 ELSE 0 END) as num_upvotes
FROM
	posts
LEFT JOIN
	post_votes
ON
	posts.id = post_votes.post_id
WHERE posts.room_id=$1
GROUP BY
	posts.id, posts.room_id, posts.link, posts.created_at, posts.updated_at
ORDER BY
	num_upvotes DESC
`

type GetTopRoomPostsRow struct {
	PostID     uuid.UUID
	RoomID     uuid.UUID
	Link       string
	CreatedAt  time.Time
	UpdatedAt  time.Time
	NumUpvotes int64
}

// use to retrieve the "Top" posts in a given room
func (q *Queries) GetTopRoomPosts(ctx context.Context, roomID uuid.UUID) ([]GetTopRoomPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopRoomPosts, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopRoomPostsRow
	for rows.Next() {
		var i GetTopRoomPostsRow
		if err := rows.Scan(
			&i.PostID,
			&i.RoomID,
			&i.Link,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.NumUpvotes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
